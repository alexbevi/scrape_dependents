name: Scrape Dependents

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
      language:
        required: true
        type: string
      type:
        required: true
        type: string
      min-stars:
        required: false
        type: number
        default: 100
      max-pages:
        required: false
        type: number
        default: 0
      package_id:
        required: false
        type: string
        default: ''
      output-dir:
        required: false
        type: string
        default: output

jobs:
  scrape:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install deps
        run: npm ci
      - name: Run scraper
        id: run-scraper
        env:
          DEPENDENTS_TOKEN: ${{ secrets.DEPENDENTS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p ${{ inputs.output-dir }}
          # derive REPO_NAME as last path segment and export for later steps
          repo_full="${{ inputs.repo }}"
          repo_name="${repo_full##*/}"
          echo "REPO_NAME=${repo_name}" >> $GITHUB_ENV
          echo "repo_name=${repo_name}" >> $GITHUB_OUTPUT
          node src/scrape_dependents.mjs \
            --repo "${{ inputs.repo }}" \
            --min-stars ${{ inputs.min-stars }} \
            --max-pages ${{ inputs.max-pages }} \
            --output-dir ${{ inputs.output-dir }} \
            --package_id "${{ inputs.package_id }}" \
            --language "${{ inputs.language }}" \
            --type "${{ inputs.type }}"
      - name: Commit and push reports
        if: always()
        env:
          OUTPUT_DIR: ${{ inputs.output-dir }}
        run: |
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          # Ensure we have the latest remote branch and rebase to avoid push rejections
          git fetch origin --prune
          branch="${GITHUB_REF#refs/heads/}"
          echo "Target branch: $branch"
          git checkout "$branch" || true
          echo "Attempting to pull/rebase origin/$branch"
          # Stash any local changes (including untracked) so pull --rebase can proceed
          prev_stash=$(git rev-parse --verify refs/stash 2>/dev/null || echo '')
          git stash push --include-untracked -m "pre-scrape-output" || true
          new_stash=$(git rev-parse --verify refs/stash 2>/dev/null || echo '')
          STASHED=0
          if [ "$new_stash" != "$prev_stash" ]; then STASHED=1; fi

          if git pull --rebase origin "$branch"; then
            echo "Successfully updated local branch from origin"
          else
            echo "Warning: failed to pull/rebase origin/$branch (possible conflicts). Skipping commit/push to avoid rejected pushes."
            # Try to restore stash state then abort
            if [ "$STASHED" -eq 1 ]; then git stash pop --index 2>/dev/null || true; fi
            git rebase --abort 2>/dev/null || true
            exit 0
          fi

          # Restore stashed changes, if any. If stash pop fails, avoid committing to prevent conflicts.
          if [ "$STASHED" -eq 1 ]; then
            if ! git stash pop --index; then
              echo "Warning: stash pop failed (merge conflicts). Skipping commit/push to avoid corrupting the branch."
              git rebase --abort 2>/dev/null || true
              exit 0
            fi
          fi
          # Add the output directory; force-add in case output is in .gitignore
          echo "Forcing add of $OUTPUT_DIR (may be ignored by .gitignore)"
          git add -f "$OUTPUT_DIR" || true
          # If there are staged changes, commit and push; otherwise skip
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add dependents reports for ${{ inputs.repo }} (run ${{ github.run_id }})"
            git push origin "$branch"
          fi